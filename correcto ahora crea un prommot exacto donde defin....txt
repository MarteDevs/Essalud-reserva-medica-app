Prompt de Desarrollo: Aplicación Android "Essalud Reservas"
1. Visión General del Proyecto
Objetivo: Crear una aplicación Android nativa llamada "Essalud Reservas" que permita a los usuarios registrarse, iniciar sesión, explorar una lista de doctores, ver sus perfiles y agendar citas médicas. La aplicación debe ser robusta, escalable y seguir las mejores prácticas de desarrollo de Android.
Público Objetivo: Pacientes que buscan una manera sencilla de gestionar sus citas médicas desde su dispositivo móvil.
2. Especificaciones Técnicas
* Lenguaje de Programación: Kotlin (100%).
* Interfaz de Usuario (UI): XML. Se debe usar ViewBinding para interactuar con las vistas de forma segura.
* Arquitectura: MVVM (Model-View-ViewModel). Es mandatorio separar la lógica de la UI.
   * View: Activities y Fragments (la capa de UI).
   * ViewModel: Clases que extienden de ViewModel para exponer datos a la UI y manejar la lógica de negocio. Usar LiveData o StateFlow para la comunicación reactiva.
   * Model: Capa de datos que incluye el Repositorio, la fuente de datos (Room) y las entidades.
* Base de Datos Local: SQLite gestionado a través de la librería Room. La base de datos será la única fuente de verdad (single source of truth).
* Gestión de Hilos: Usar Corrutinas de Kotlin para todas las operaciones asíncronas (llamadas a la base de datos).
* Navegación: Utilizar el Componente de Navegación de Android Jetpack para la navegación entre fragmentos dentro de la actividad principal. Usar Intents para la navegación entre actividades.
* Dependencias Clave:
   * androidx.appcompat, com.google.android.material (para componentes de UI).
   * androidx.constraintlayout (para layouts complejos).
   * androidx.lifecycle (ViewModel, LiveData).
   * androidx.room (Runtime, Compiler (KSP), KTX).
   * androidx.navigation (Fragment KTX, UI KTX).
   * org.jetbrains.kotlinx.coroutines (Core, Android).
3. Estructura de la Base de Datos (Entidades Room)
Se deben crear las siguientes tres entidades:
1. User.kt:
   * id (Int, PK, autogenerado)
   * nombreCompleto (String)
   * email (String, único)
   * password (String) - Nota: Para este proyecto, se guardará en texto plano. No es seguro para producción.
2. Doctor.kt:
   * id (Int, PK, autogenerado)
   * nombre (String)
   * especialidad (String)
   * biografia (String) - Una descripción larga del doctor.
   * fotoUrl (String) - Un placeholder o URL a una imagen.
   * horarioAtencion (String) - Ej: "Lunes a Viernes, 9 AM - 5 PM".
3. Cita.kt:
   * id (Int, PK, autogenerado)
   * userId (Int) - Clave foránea que referencia a User.
   * doctorId (Int) - Clave foránea que referencia a Doctor.
   * fecha (String) - Formato "dd/MM/yyyy".
   * hora (String) - Formato "hh:mm a".
   * estado (String) - Ej: "Programada", "Cancelada".
4. Flujo de Pantallas y Funcionalidades
Pantalla 1 y 2: Registro e Inicio de Sesión (AuthActivity)
* UI: Usar una sola AuthActivity que gestione dos fragmentos: RegisterFragment y LoginFragment.
* RegisterFragment:
   * Campos: Nombre completo, correo, contraseña, confirmar contraseña.
   * Lógica (AuthViewModel): Al registrar, validar que los campos no estén vacíos y que las contraseñas coincidan. Insertar el nuevo User en la base de datos Room. Si el correo ya existe, mostrar un error.
* LoginFragment:
   * Campos: Correo, contraseña.
   * Lógica (AuthViewModel): Validar las credenciales contra la base de datos. Si son correctas, navegar a MainActivity. Para simular una sesión, se puede usar SharedPreferences para guardar el ID del usuario logueado.
Pantalla 3: Página Principal (MainActivity con BottomNavigationView)
* UI: Una MainActivity que contendrá un NavHostFragment y una BottomNavigationView con tres pestañas:
   1. Inicio (HomeFragment): Un saludo de bienvenida al usuario. Puede mostrar un resumen rápido de la próxima cita.
   2. Doctores (DoctorsFragment): Muestra la lista de doctores.
   3. Mis Citas (AppointmentsFragment): Muestra las citas del usuario.
Pantalla 4: Lista de Doctores (DoctorsFragment)
* UI: Un RecyclerView que muestra una lista de todos los doctores. Cada ítem debe mostrar la foto, nombre y especialidad del doctor.
* Lógica (DoctorsViewModel):
   * Obtener la lista de todos los doctores desde el CitaRepository.
   * El ViewModel debe exponer un LiveData<List<Doctor>>.
   * Poblar datos: Al iniciar la app por primera vez, se deben insertar en la base de datos 3-5 doctores de ejemplo para que la lista no esté vacía.
* Interacción: Al hacer clic en un doctor, navegar a la pantalla de detalles del doctor, pasando el doctorId como argumento.
Pantalla 5: Detalles del Doctor (DoctorDetailActivity)
* UI:
   * Mostrar toda la información del doctor: foto grande, nombre, especialidad, biografía y horario de atención.
   * Un botón flotante o un botón fijo en la parte inferior con el texto "Programar Cita".
* Lógica (DoctorDetailViewModel):
   * Recibir el doctorId del Intent.
   * Solicitar al repositorio los detalles completos de ese doctor y exponerlos vía LiveData.
* Interacción: Al presionar "Programar Cita", navegar a la pantalla de selección de fecha y hora, pasando el doctorId.
Pantalla 6: Programar Cita (ScheduleActivity)
* UI:
   * Un CalendarView o un DatePickerDialog para seleccionar la fecha.
   * Un RecyclerView con "chips" de horas disponibles (ej: 09:00, 09:30, 10:00) o un TimePickerDialog.
   * Un botón de "Confirmar Cita".
* Lógica (ScheduleViewModel):
   * Recibir el doctorId.
   * Obtener el userId del usuario logueado (desde SharedPreferences).
   * Al confirmar, crear un nuevo objeto Cita con userId, doctorId, fecha y hora seleccionadas.
   * Llamar al repositorio para insertar la nueva cita en la base de datos.
   * Mostrar un mensaje de confirmación (Toast o Snackbar) y cerrar la actividad, regresando a los detalles del doctor.
Pantalla 7: Ver Citas Programadas (AppointmentsFragment)
* UI: Un RecyclerView que muestra las citas programadas del usuario logueado.
* Lógica (AppointmentsViewModel):
   * Obtener el userId del usuario logueado.
   * Solicitar al repositorio una lista de citas filtrada por userId.
   * Exponer un LiveData con la lista de citas del usuario.
   * Cada ítem de la lista debe mostrar el nombre del doctor, especialidad, fecha y hora.
   * (Opcional) Añadir un botón para cancelar la cita.